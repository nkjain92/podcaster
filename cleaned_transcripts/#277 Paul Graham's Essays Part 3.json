{
  "transcript": "How to make wealth? There are a lot of ways to get rich and this essay is about only 1 of them. This essay is about how to make money by creating wealth and getting paid for it. The advantage of creating wealth as a way to get rich is that it's more straightforward. You just have to do something that people want. Money is not wealth. This paragraph is key to understanding this entire essay. Wealth is the stuff we want. Food, clothes, houses, cars, gadgets, traveled interesting places. And so on. You can have wealth without having money. If you had a magic machine that could on command make you a car or cook you dinner or do anything else that you wanted, you wouldn't need money. Whereas, if you were in the middle of Antarctica where there's nothing to buy, it wouldn't matter how much money you had. Wealth is what you want. Not money. But if wealth is the most important thing, why does everyone talk about making money? It is a kind of shorthand. Money is a way of moving wealth and in practice, they are usually interchangeable. But they are not the same thing. The people most likely to grasp that wealth can be created are the ones who are good at making things. The craftsman. Their handmade objects become store bought ones. But with the rise of industrialization, there are fewer and fewer craftsman. 1 of the biggest remaining groups is computer programmers. A programmer can sit down in front of a computer and create wealth. A good piece of software is in itself a valuable thing. Programmers literally think the product, 1 line at a time. It's also obvious to programmers that there are huge variations in the rate at which wealth is created. At Via web, which was Paul start that he sold Tia yahoo At via web, we had 1 programmer who was a sort of monster of productivity. I remember watching what he did 1 long day and estimating that he had added several hundred thousand dollars to the market value of the company. A great programmer could create a million dollars worth of wealth in a couple weeks. A mediocre programmer over the same period will generate 0 or even negative wealth. Steve jobs repeated a variation of this idea his entire career. You must find extraordinary people is what he would repeat over and over again. Wealth is whatever people want. That is a concise description of this essay. Wealth is whatever people want. Think about this why comb motto, which Paul is going to found I think the year after, a few months after this essay essays is written, why comb motto make something people want. When Paul wrote that wealth is whatever people want, yc was not founded yet, but you could see the thinking behind it was there. The way most companies make money is by creating wealth. Nearly all companies exist to do something people want. A more direct way to put it would be, you need to start doing something people want. You don't need to join a company to do that. All a company is is a group of people working together to do something people want, which is also why there's always limitless opportunities because people always want new things. A way to think about this is my favorite quote on this is Rich from Richard Branson and a business it's just an idea that is gonna make other people's lives better. Now he gets to the part of the essay on working harder, which is something that he references a lot in a bunch of his essays. It turns out that there are economies of scale on how much of your life you devote to your work. In the right kind of business, someone who really devoted himself to work could generate 10 or even a hundred times as much wealth as an average employee. He started this essay that if he wanted to get rich, How would you do it? And he says, I think your best bet would be to start or join a startup. That's the very first sentence. This is a couple pages later, and we're seeing why main theme it's really hard to generate wealth inside of large companies companies are not set up to reward people who want to do this meaning work 10 or even a hundred times harder, who are not companies not set up to where people who wanna do this. You can't go to your boss and say, I'd like to start working 10 times as hard. So will you please pay me 10 times as much. And 1 of the reasons Paul says that it's hard to do inside large companies is the lack of measurement and leverage. He says to get rich. You have to have leverage. He's not talking about financial leverage by the way. To get rich, you have to have leverage in the sense that the decisions you make have a big effect. If you're in a job that feels safe, you're not gonna get rich because if there's no danger, there's almost certainly no leverage. And then he goes into small equals measurement that's the second part of this, you can measure the value of the work done by small groups. The opposite of this is why it's hard to generate personal wealth inside of a large company. Starting or joining a startup is thus, as close as most people can get to saying to one's boss, I wanna work 10 times as hard, so please pay you 10 times as much. There are 2 differences. You're not saying it to your boss, but directly to the customers for whom your boss is only a proxy after all. And you're not doing it individually, but along with a small group of other ambitious people. And this line is so fantastic. The people you work with had better be good because it's their work that yours is going to get averaged with. That is why all of history's greatest founders including Steve Jobs say you must find extraordinary people to work with. In fact, you might remember this from episode 02:08 where this interview of Steve Jobs is being done in 19 97, and he says that the founders most important job. He said recruiting. Is the founder most important job. Back to the essay extra motivation comes from being in a small group. But by selecting that small of a group, you can get the best growers. Each 1 will be in the top 1 percent. That is the real point of startups. You are getting together with a group of other people who also want to work a lot harder and get paid a lot more than they would in a big company. A startup is not merely 10 people, but 10 people like you. Steve Jobs, once said that success or failure of a startup depends on the first 10 employees. I agree. I'm pretty sure Paul's referencing that same, interview that I covered in the book in the company of giants back on Episode 02:08. So me just repeat that real quick. Steve Jobs once says the successor failure of a startup depends on the first 10 employees. I agree. A very able person who does care about money will ordinarily do better to go off and work with a small group of peers. That's a really important part on 2 75, which is the first episode I did in Paul Graham. When I shared what he would do if he was starting a company now. That part really resonated. I had a ton of people share publicly on social media, but also send me, private messages about hearing that. And he says, I'm just gonna read the the second part it real quick. He says at every point in the company's growth. I'd keep the company as small as I could. I'd always want people to be surprised by how few employees we had. Fewer employees equal lower costs and less less need to turn into a manager. This is the most important point though. His punch here. He says, when I say small, I mean small and employees, not revenue. That is very important. He's writing that tweet, I think 15 years, maybe even close to 20 years. Now, about 15 years, after he's writing when he's writing in this essay. This is something you and I talk about over and over again that the people building these companies. They don't have 20 things or hundred things that are they're gonna... They want you to remember. They have a handful of core principles that they repeat decade over a decade, and we see that here, a very able person who does care about money will ordinarily do better to go off and work with a small group of peers. Then he gets into the point of what he means about leverage. For him, technology equals leverage, this is a another very important line. What is technology? It's technique. It's the way we do we all do things. And when you discover a new way to do things, its value is multiplied by all the people who use it. And he goes into that, this is the domain of small companies. Right? Small companies are more at home in this world because they don't have layers of bureaucracy to slow them down. Also, technical advances tend to come from unorthodox approaches. And small companies are less constrained by convention. And I love what he does here. He ties this into no 1 thinks of Walmart is a technology company, but he makes the point. Sam Walton got rich not by being a retailer, but by designing a new kind of store. Go back to the previous page. What is technology? It's a technique. It's the way we all do things. Few paragraphs later, he ties it in, Sam Walton, the founder of Walmart. To no 1 thinks of Walmart as a technology company. Sam Walton got Rich, Not by being a retailer, but by designing a new kind of store, episode 01:50, and episode 02:34 if you don't know what Paul graham is talking about, you will see Sam Walton experiment decade after decade of trying to find a new kind of store. And then stumbling on to this idea. It's like, oh, there's a ton of business out there and all these little small rural towns that all the other big retailers ignored. And if you can offer the lowest prices, these people will drive far distances just to save money. It is also a good idea to go and read about the opening the first Walmart store. The idea that's gonna generate in the future 1 of the largest fortunes that a family's ever made in the history of humanity starts off with donkey crap and exploding watermelon. That is not hyper, that actually happened back to the essay. His idea. He... Very next paragraph. He talks about it... 1 of my favorite ideas that I've learned from him again, taking a very complex idea and breaking it down to the app level run upstairs, which means the heart or something is to do the less competition you're gonna have. So Paul writes, use difficulty as a guide, not just selecting the overall aim of your company, but also at decision points along the way. At V web, 1 of our rules of thumb was run upstairs. Suppose you're a little nimble guy being chased by big fat bully. You open a door and find yourself in a staircase. Do you go up or down? I say up, the bully can probably run downstairs as fast as you can going upstairs as bulk will be even more of a disadvantage. Running upstairs is hard for you but even harder for him. What this meant in practice was that we deliberately sought hard problems. If there were 2 features we could add to our software, both equally valuable in proportion to their difficulty, we would always take the harder 1. Not just because it was more valuable, but because it was harder. We delighted enforcing bigger, slower competitors to follow us over difficult ground. Venture capitalists know about this and have a phrase for it, barriers to entry. If you go to Vc with a new idea and ask him to invest in, 1 of the first things I'll ask is how hard would this be for someone else to develop. Now we get to the point of what's the catch. There is a large random multiplier in the success of any company. Most startups tank It's common for a start to be developing a genuinely good product, take slightly too long to do it, run out of money and have to shut down. And I think this is a good line to end the essay sa part before I get to the footnotes. The ball you need to keep your eye on here is the underlying principle that wealth is what people want. So few businesses really pay attention to making customers happy. And just 2 things in the footnote. This last sentence I'll get to you in 1 second is a really good point. The very end of this paragraph. There are many senses of the word wealth, not all of them material. I'm not trying to make a deep philosophical point here about which is the true kind. I'm writing about 1 specific rather technical sense of the word wealth. What people will give you money for. This is an interesting sort of wealth to study because it's a kind that prevents you from starving. This is a fantastic sense inside of a double online that ends it. And what people will give you money for depends on them, not you. And then... And this essay on really just good life advice from Paul. This is more on his idea of running upstairs on doing something difficult intentionally. This is a good plan for life in general. If you have 2 choices, choose the harder, If you're trying to decide whether to go out running or sit home and watch Tv, go running. Probably the reason this trick works so well is that when you have 2 choices and 1 is harder. The only reason you're even considering the other is laziness. You know in the back of your mind, what's the right thing to do. And this trick merely forces you to acknowledge it. So there's an excerpt from the booking we talked you about today, which is the collection of programs essays called hackers and painters, big ideas from the computer h. Okay. So I wanna start with the essay that the book is named after, which is hackers and painters. And I think the point of reading this essay from my perspective is Paul trying to describe and really teach, like, It's learning how to make good things. So he says, when I finished grad school and computer science. I went to art school to study painting. A lot of people seem surprised that someone interested in computers would also be interested in painting. They seem to think that hacking and painting were very different kinds of work. Then it goes into his main theme here. Hacking and painting have a lot in common. In fact, of all different types of people I've known, hackers and painters are among the most alike. What hackers and painters have in common is that they're both makers. What hackers and painters are trying to do is make good things. And so that ties together with his other essay how to make wealth, if you can learn to make good things that people want, that is how you build wealth. And then what I found so interesting about the next section he's talking about the fact that both hackers and painters learn by doing. And I wrote this is similar to his perspective on how to build a company. I was taught in college that 1 ought to figure out a program completely on paper before even going near a computer. I found that I did not program this way. I found that I like to program sitting in front of a computer, not a piece of paper. Instead of patiently writing out a complete program and assuring myself it was correct. I tended to just sp out code that was hopeless broken and then gradually beat it into shape. For a long time, I felt bad about this. If I had only looked over, this is so this is such a good point. If I had only looked over at the other makers, the painters or the architects, I would have realized that there was a name for what I was doing. Sketching. You should figure out programs as you're writing them just as writers and painters and architects do. And then he goes back to a very interesting thought about the edge that small companies have. And this is the edge of being able to make a truly great product. Only a small percentage of hackers can actually design software. And it's hard for people running a company to pick these out. So instead of ent the future of the software, of their software to 1 brilliant hacker, most companies set things up so it's designed by committee and the hackers merely implement the design. If you want to make money at some point. Remember this because this is 1 of the reasons startups win big companies want to decrease the standard deviation of design outcomes because you want to avoid disaster. So essentially saying, hey, startups ups and smokers groups of people, you're gonna have more tens, but you're also gonna have a lot more ones. As companies grow, they they wanna get rid of these what he calls os. And so they're more comfortable with a bunch of fours, maybe 4, like, the 4 to 6 range, something like that because they're worried about a disaster. Right? So big companies wanna decrease the standard deviation of design outcomes because they wanna avoid disasters. But when you damp os, you lose the high points as well as the low. This is not a problem for big companies because they don't win by making great products. Big companies win by sucking less than other big companies. That's a very interesting point and just 1 run random a paragraph in here for you. This is he just mentions briefly what he looked for when he was interviewing people at his startup at Via webb when we interviewed programmers, the main thing we cared about was what kind of software they wrote in their spare time. You can't do anything really well unless you love it. And if you love to hack you'll inevitably be working on projects of your own. And then he goes back into the importance of learning by doing. And really, the series of highlights I have here are on the magic of gradual refinement. 1 thing we can learn from the example of painting is to is how to learn how to hack. You learn to paint mostly by doing it. Get o for hacking. You learn a hack mostly by hacking because painters leave a trail of work behind them, you can watch them learn by doing. If you look at the work of a painter in chronological order, You'll find that each painting builds on things learned in previous ones. I real... This is the same exact idea that you see when you read biography of an entrepreneur. You'll find that each idea builds on things learned in previous ones. I just referenced Sam Walton is the clearest description of that. I think that's a really important idea because I think you and I also do this. Let me... I'm gonna read this again. Because painters leave a trail of work behind them, you can watch them learn by doing. If you look at the work of a painter in Chronological order, you'll find that each painting builds on things learned in previous ones. I think most makers work this way. And so that's the learning by doing part. Then he's saying, hey, you learn from other examples. Really, I that's what founders. Podcast is for us That's what reading these books is. Right? The other way maker's learn is from examples to a painter, a museum is a reference library of techniques that's exactly what a biography of an entrepreneur. For hundreds of years. It has been part of the traditional educational painters to copy the works of the great masters because copying forces you to look closely at the way a painting is made. This is such fantastic. Such a fantastic idea. Writers do this too. Benjamin Franklin learned to write by summarizing the points in the essays of Addison and steel and then trying to reproduce them. Hackers likewise can learn to program by looking at good programs, not just of what they do, but at the source code. Another example we could take from painting is the way that painters are created or excuse that paintings are created by gradual refinement. I think companies are created by gradual refinement as well. Now we get to my absolute favorite idea in this entire book. And it could be summarized in 2 words where relentless wins. This sounds like a paradox, but a great painting has to be better than it has to be. So again, great painting for our purposes We're talking about a product. Right? It sounds like a paradox, but a great product has to be better than it has to be. What the hell does that mean? For example, when Leonardo Vinci painted the portrait of Jan geneva Deb vinci. He put a Juniper bush behind her head. In it, he carefully painted each individual leaf. Many painters might have thought this is just something to put in the background to frame her head. No 1 will look that closely at it. Not Leonardo. How hard he worked on part of a painting didn't depend at all on how closely expected anyone to look at it. He was like Michael Jordan, relentless. Relentless wins because in all my goodness Gracious. This is just fantastic. We're relentless wins because in the aggregate, unseen details become visible. When people walk by the portrait, their attention is often immediately arrested by it, even before they look at the label and notice that it says Leonardo Vinci, all those unseen details combined to produce something that's just stunning, like a thousand barely audible voices all singing in tune. Great software likewise, requires a fan phonetic... Again, great products. Likewise, require a fan devotion to beauty. If you look inside good software, This is just like Steve jobs, talking about what he learned from his father. Right? That you're not gonna put Now when your carpenter you're not gonna put, a piece of, like, crappy wood on the back of a dresser that you're making even though no 1 gonna see it. You also use example of the other side of fence too. If you look inside good software, you'll find that parts, no 1 is ever supposed to see or beautiful too. When it comes to code, I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way. And I think that what he's describing there at the very end, is common to anybody's that's capable of making a truly great product. Think about it when it comes to code for show Paul's case, whatever you and Our building. Right? I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way. Relentless wins because in the aggregate, unseen details become visible. This is first on how to work well with other people. The example of painting can teach us not only how to manage our own work but how to work together. A lot of the great art of the past is work... Is the work of multiple hands though there may only be 1 name on the wall next to it in the museum. Leonardo was an apprentice in the workshop of some guy's name I don't not pronounce and painted 1 of, the angels in this painting called baptism of Christ. This sort of thing was the rule, not the exception. When painters work together on a painting, they never worked on the same part. So, again, he's really telling us how to work well with other people. Okay? When painters work together on a painting, they never worked on the same parts. You never had 1 guy painting over the work of the other. I think this is the right model for collaboration and software too. When a piece of code is being hacked by 3 or 4 different people, no 1 of whom really owns it, it will end up being like a common room. The right way to collaborate, I think is to divide projects into sharply defined modules. Each with a definitive owner, and with interfaces between them that are as carefully designed and if possible as articulated as programming languages. That's really good. I'm gonna read that again. The right way to collaborate, I think, is to divide project into sharply defined modules each with a definitive owner and with interfaces between them that are as carefully designed and if possible as articulated as programming languages. Now this is the customer obsessed part. Like painting, most software is intended for a human audience. You have to be able to see things from the user's point of view from the customer's point of view. It turns out that looking at things from other... This is so good. It turns out that looking at things from other people's point of view is practically the secret of success. And finally, I'll just end this essay this part on this essay with just 1 line. It's such a great line. I feel like I should put, like, printed it out pain on the wall. You only get 1 life. You might as well spend it working on something great. So I just wanna pull out few highlights from this other essay sa. He wrote it this back in September 2001. It's called the other road ahead. And I'm reading it you because 1, I think the idea ideas are good. And 2, this is many years before he founded y comb. And, again, we see, like, the pre history. This like, what he just talked about is if you you go and see a, a painters, you can see, like the Cro, if you look at a a painters work in chronological order. You can see, like the gradual I'm in, how 1 idea builds on another. You can see the same thing in writing in in Paul's writing. And so Paul writes. There are only 2 things you have to know about business. Build something users love and make more than you spend. That made me think of 1 of my favorite quotes. I've read this on, you know, I don't know, dozens of podcast in the past, but it comes from Don Valentine in the founder Sequoia. And he says there are 2 things in business that matter, and you can learn this in 2 minutes. High gross margins and cash flow. All companies that go out of business do so for the same reason. They run out of money. And so back to Paul, the less you spend, the easier it is to make more than you spend. I'm gonna read something. If you have access to founders daily, this is episode 12 on Founders daily. But it's from an essay that Paul wrote in 2008, and we're gonna see the idea very similar to what he's writing in the book that I'm holding my hand with the... The this essay was published in 2001. And so now this is from his essay, why to start to start up in a bad economy. It says, I'm reading directly from the podcast player. If you have learned 1 thing from funding... If we have learned 1 thing from funding so many startups is that they succeed or fail based on the qualities of founders. The economy has some effects, certainly. But as a predictor of success, it's a rounding error compared to the founders. Which means that which means that what matters is who you are, not when you do it. If you're the right sort of person, you will win even in a nevada economy. If you're worried about threats to the survival of your company is 1 of my favorite parts. If you're worried about threats to the survival of your company, don't look at them in the new, don't look for them in the news, look in the mirror. Fortunately, the way to make a startup recession proof is to do exactly what you should do anyway, run it as cheaply as possible. For years. I've been telling founders that the sure route success is to be the cockroaches of the corporate world. What writing? That's such... Because That that... Again, great writing. Just... I always say, like, reading a rate book is as kinda it's like a movie for the mind. The words that are on the page are gonna put an image. Really great words on the page are you're gonna put an image in your mind. And as soon as I read read that, like, I see something in my mind? I've been telling Founders for the sure route, success to be the cockroaches of the corporate world. The immediate cause of death in a startup is to is always running out of money, which is exactly what don Valentine just told us, so the cheaper your company... This is the punchline here, so the cheaper your company is to operate the harder it is to kill. So let's go back to this, essay say that... In from the book, I'm holding my hand, the less you spend, the easier it is to make more than you spend. As for building something users love, here's some general tips. Start by making something clean and simple that you would wanna use yourself. The standard to compare your software to or and your product. Right? The center compare your product to is what it could be, not what your current competitors happen to have, use your software you... Yourself all the time. Use your product yourself all the time. Okay. So I wanna jump to Paul's essay a mind the gap. When people care enough about something to do it well. Those who do it best tend to be far better than everyone else. There's a huge gap between Leonardo Vinci in second rate conte. A top ranked professional chess player could play 10000 games against an ordinary club player without losing once. Like chess or painting or writing novels, making money is a very specialized skill. But for some reason, we treat this skill differently. You get paid by doing or making something people want. And those who make more money are often simply better at doing what people want. Steve jobs saved a company that was in terminal decline the way I think about what paul's about to get into right here is Apple buys next for what, 450000500... Let's... I think it's 450000000. Let's let's just say 500000000. They paid half a billion dollars essentially to re hire Steve jobs. And it was the bargain of the century. Steve jobs saved a company that was in terminal decline, and not merely in the way a turnaround specialist does by cutting costs. He had to decide what he had to decide what Apple's next product should be. Few other people could have done it? It may seem unlikely in principle that 1 individual could really generate so much more wealth than another. What would Apple's next product look like? If you replace Steve jobs with a committee of a hundred random people. These things don't scale linearly, which is also probably why we don't understand them intuitively. Then he gets into the fact that people, you know, complain of about, oh, this this profession gets paid so much more than the other profession and Paul's point is that in a free market, prices are determined by what buyers want. People like baseball more than poetry. So baseball players make more than poets. To say that a certain kind of work is underpaid is thus identical with saying that people want the wrong thing. So that was an interesting point. My interpretation for myself, the note I love left for myself on this page is, this means you should find the intersection of what you're good at and what people want. And then you spent some time writing about, you know, most people think there's a lot of people to. And then maybe I most people... A lot of people think that the amount of wealth in the world it's it's like a pie. It's ecstatic. And as we know from Paul writing his other is that's not true. You can actually create wealth, and you create wealth by making things that other people want. Thus increasing the size of the pie. Steve Jobs and Steve Was act didn't have to make us poor to make themselves rich. Quite the opposite. They created things that made our lives material materially richer. And I don't think he says it explicitly in this essay, but implicitly it's like, well, technology is just gonna lead to a more, an ever increasing variance in the amount of productivity that 1 person have, and therefore, an ever increasing variance in the amount of wealth that 1 person has and 1 person doesn't. And so if you have an entire society that thinks that people only get wealthy by stealing or taking from other people, like, for example, Steve jobs, is getting richer, so therefore, somebody else wants be getting poor. If society doesn't catch up to understanding that wealth is not finite and something that should be growing over time. It could lead to a lot of, you know, social unrest and cultural issues. And so he goes back to this main theme that technology is leverage. Remember he's writing this this essay in 2004. This is only, you know, increase his increase even more So in our time, and it looks like, you know, we'll continue una ab. And so this section is called the lever of technology. Will technology greece increase the gap between the rich and the poor. It will certainly increase the gap between the productive and the unproductive. That is the whole point of technology with a tractor, a farmer could plow 6 times as much land in a day as he could with the team of horses. But only if he mastered a new kind of farming, that is a very excellent point about the value of learning about and then using technology and that most people won't won't actually. If you take 2 farmers that have both spent their entire lives, plowing their field with a team of... A team of horses, the 1 that is reluctant to change the 1 that is reluctant to learn about new technology technologies is gonna be left in the dust by the other 1 that isn't. So with a tractor, a farmer could plus 6 times as much land in a day as he could with the team of forces, but only if he mastered a new kind of farming. I've seen the love of technology grow visibly in my own time. In high school, I made money by mowing lawns and scoop ice cream at Ba Robbins. This was the only kind of work available to time. Now high school kids could write software design websites, but only some of them will. The rest will still be scoop ice cream. It's another great point. I remember very vividly when in 19 85, when in 19 85, improved technology made it possible for me to buy a computer of my own. Within months, I was using it to make money as a freelance programmer. A few years before, I couldn't have done this. A few years before, there was no such thing as a freelance programmer. That's was a great illustration of his main idea that Wealth can more wealth can always be cr... Always be created. No 1 is getting poor because Paul Graham is sitting there now, making money as a freelance program in 19 85. But he is getting wealthier. And then wrap this section up with a fantastic line, and I'm betting everything I have on this idea being accurate. So we should expect to see ever increasing variation in individual productivity as time goes on. This is an idea that Just been absolutely obsessed with for a long for many many years. It's how big a difference can a single person or a small team make. In fact, there's a video saved on my phone. I recorded the video on 09/29/2018, and I cannot find the video that I was I was making a recording of a screen which is really funny. Like, filming my computer with my phone. But, it's actually Paul graham on stage. He's at this thing. I zoomed in on his badge. It's something called the cloud and khan. So the cloud and conference. He's wearing a navy blue sweater. If anybody can find this video for me. And I think he's being interviewed by the founder of Cloud, and the founder asks him this question. How big a difference kind of single developer or a small team make. And he says the answer is increasingly much, increasingly much remember things in 2018. Really what he's writing a variation of the idea that he's writing all the way back in 2004. That, hey, we should expect to see ever increasing variation in individual pro... Productivity time goes on because the level of technology is going to keep increasing increasing. Right? So it says, The answer is increasingly much increasingly much. Our committee said if you had a lever long enough you could move the world. Well nowadays from your bedroom, thanks to all the infrastructure exist, combination of open source, services like Aws and like, the lever is enormously long. You could be sitting in your bedroom programming, a single person. And if you make something that people like and is novel, it can have a really huge effect. That is very exciting. You guys may take this for granted, but anybody who is old as me realizes that was not the case 20 years ago. It will be interesting to see how far it goes because it is certainly not over yet, and then he's asked a follow question how far can it go and his answer gives me goosebumps. Always further than people expect. And then before I leave this essay, I just gotta point and, bring something to your attention, Paul's is constantly putting what he's talking about in his historical context. He's like, the key for societies for countries is Founders... The people have founder mentality, they're gonna go build wealth. They will make our society's richer, but the only way they'll make our society's richer if you let them keep a percentage of the wealth that they create, and then he says a lot of countries in history, make the mistake where they turn this off, they don't let people with like fundamental mentality people crew trying to build new companies new forms as wealth well, keep the fruits of their labor. And when they try to decrease the variance in economic out like this person too which wells compared to the average person, The end result is making everybody poor. So he says, at various times and places in history, whether you could accumulate a fortune by creating wealth had been turned on and off. This is fantastic. Northern Italy in 800 off. Northern Italy and 1100 on, Central France and 1100 off. England in 1800 on, England in 19 74 off. I didn't know what he's talking about here, and then he puts it into parenthesis which just fantastic. So in England, 1800, you get to keep you off the on. England 19 74 It's off because they give a 98 percent tax on investment income. That's crazy. United States in 19 74 on. We've even had a twin study, West Germany on East Germany off. In every case, their creation of wealth seems to appear and disappear, that's really important part. Like the noise of a fan as you switch on and off the prospect of keeping it. And he's got a fantastic way to dis steal the idea talking about. If you let Henry Ford get rich, he'll make you a tractor to replace your horse. So before I jump into his next essay, which is called beating the averages. I wanna read. I have notes on this this podcast Paul was on. Back in 2009, it's an episode of this podcast called inc E econ talk, the name of the... The title the episode is program on startups innovation and creativity. But there's a quote he mentions on hackers and painters that I think it related to is gonna relate to this essay sa and the next essay, Gonna share with you, and this is what Paul said. He says I found that the interesting parts of programming you can't make scientific. Startups are the same. What makes a programmer or good at programming is more like what makes a pain or good at painting. It is something a little less organized. It is taste, a sense of design, a certain neck. And so I just wanna pull out a a few random ideas from this this essay called beating the averages. So the first idea is thinking of ideas as tools. If a painter were offered a brush that would make him a better painter. It seems to me that he would wanna use it in all of his paintings, wouldn't he? The second idea is aiming for monopoly a really way to think about it what he would reference earlier, you should have a barrier to entry in what you're doing. Forrest doing is easy to copy. A lot of people are gonna copy it. And that the best businesses are very hard to copy in later essays he uses this example of like stripe in Airbnb to illustrate this point. And so he writes software is a very competitive business, prone to natural mono monopoly. A company that gets software written faster and better will, all other things being equal, put its competitors out of business. Paul writes a lot about the advantages of small teams of small companies have over larger ones, but there's also disadvantages, and 1 thing that startups cannot or small companies cannot afford to do is not focus. And so he has this idea you could usually should ignore what other people are doing and consider only will work best. In a big company, you can do what all the other big companies are doing, but a startup can't do what all other ser do. I don't think a lot of people realize this even in startups. Then he goes into the fact that a small company can actually just succeed by only need... They actually only need to be good at 1 thing. When we started via web, we had no experience a business. We didn't know anything about marketing or hiring people or raising money or getting customers. Neither of us even ever it even had what should call a real job The only thing we were good at was writing software and we hope that would save us. And they talked about some other good ideas they did when he was building a start up 1, they focus on speed. Our development cycle was so fast that we could sometimes duplicate a new feature within a day or 2 of a competitor announcing it in a press release. And he said a key to that was that they had a technical advantage. He talks a lot about this book in this book about programming languages. I've omitted this. He felt that the fact that they used this, I guess, unknown, but really advanced programming language call Lisp was a massive advantage to via webb, he says, in business, there nothing more valuable than a technical advantage or advantage, your competitors don't under stand. Let me read that again. In business, there's nothing more valuable than a technical advantage, your competitors don't understand. He thought List was that for them, and he we see an idea that you and I've talked about Over again. Bad boys move in silence. For hundreds of years. As a history of entrepreneurship. We see people. They have an edge and they shut up about it. I never said anything publicly about list while we work on Via webb. This was no accident. A startup should give its competitors as a little information as possible. Okay. So now I wanna jump to Paul's Essay say called taste for makers. He says, I was talking recently to a friend who teaches at Mit. His field is hot now. He's he's writing this back in 2002. His field is hot now and every year he's is inundated by applications from would be graduate students. A lot of them seem smart he said. What I can't tell is whether they have any kind of taste, taste. You don't hear that word much now. And yet, we still need the underlying concept, whatever we call it. Well my friend meant was that he wanted students who were not just good technicians, but who could also use their technical knowledge to design beautiful things. For those of us who designed things, these are not just theoretical questions. We need good taste to make good things? Let's try considering it as a practical question. How do you make good stuff. So again, I think all this ties together. Right? He says, how do you know what to work on? Once you know what to work on how do you make something great? Why is that important? Because if we when you make great things or good things that other people find valuable, that is how you build wealth. All of these ideas connect across multiple decades and, I don't know a hundred different essays. It's really remarkable, and I don't know if I... That woulda have clicked if I haven't spent, you know, last few weeks, not only reading through entire website, but also picking up this book and reading this as well. So back to this idea of taste this is taste for makers. If you mentioned taste nowadays, a lot of people will tell you that, quote, taste is subjective. They believe this because it really feels that way to them. Saying that taste is just personal preference is a good way to prevent disputes. The trouble is it's not true. You feel this when you start to design things. Whatever job people do, they naturally wanna do it better. Football players like to win games, Ceos like to increase earnings. It's a matter of pride and a real pleasure to get better at your job, which is why I think people read essays like this, read biographies of people have chief care things, whatever... Whatever job people have, they naturally want to do better. As in any job, as you continue to design things, you'll get better at it. Your case will change. And like anyone who gets better at their job, you'll know you're getting better. If so, your old tastes were not merely different, but worse. Poof goes the axiom that taste can't be wrong. And so he talks about examining what other people learned about designing things in different domains. Like, the idea that that a hacker can learn from a painter, just like a writer can learn from a hacker, or a founder can learn from a baseball player or a poet. And this is part of Paul's own personal curriculum, as he's gone and spend his entire life trying to learn and answer this question for himself. And his conclusion is exactly what I noticed by reading hundreds of biographies, which... You and I talk about all the time. Once you start to examine the question, it's surprising, it's surprising how much different fields ideas of beauty have in common. The same principles of good design crop up again and again. And so the rest of the essay sa is what is good design. He has these headings. Like good design is simple. Good design is high us. And so I was gonna read a couple of the highlights from that. Good design is simple. You hear this from math to painting. Less is more. It means much the same thing in programming. In writing it means, say what you mean and say it briefly. It seems strange to have to emphasize simplicity. You think simple would be the default, but something seems to come over people when they try to be creative. When you're forced to be simple, you're forced to face a real problem. When you can't deliver ornament, you have to deliver substance. Next 1 is good design is timeless. If something this is such a great line I've never heard before. If something is ugly, it can't be the best solution. There must be a better 1 and eventually someone else will discover it. Aiming at timeless is a way to make yourself find the best answer. So 1 of my favorite sayings and something I don't even think I have any other good filter besides this is that time is the best filter. Paul gets into that now. Strangely enough, if you wanna make something that will appeal the future generations. 1 way to do it is to try to appeal to past generations. If you can make something that appeals to people today and would also have appeal to people in 15 in the year 1500, there's a good chance that it will appeal to people in the year 2500. Next 1 is good design is suggestive. Jane Austin's novels contain almost no description. Instead of telling you how everything looks. She tells you her... She tells her story so well that you envision the scene for yourself. Likewise, a painting that suggests is usually more engaging than 1 that tells. Everyone makes up their own story about the Mona lisa. In software, it means that you should give users a few basic elements that they can combine as they wish like Lego. Then he brings up a main theme that he repeats over and over again in different essays different time periods. Like the the value and hard work. Good design is hard. If you look at the people who've have done great work, 1 thing they all seem to have in common is that they worked very hard. If you're not working hard, you're probably wasting your time. Hard problems call for great efforts. Good design looks easy, like great athletes, great, And I think these good design is hard and good design looks easy. I think the ideas is in both of these sections are really relate to each other. Like great Athletes, great designers make it look easy. Mostly, this is an illusion. The easy conversational tone of good writing comes only on the eighth rewrite when I jot it down to myself when I got to that part, something that I learned from Art resource that's is really important. Everything is reps, reps, reps, reps. You're not gonna pick up any of these books and see a founder an entrepreneur, an athlete and explore an artist do their best work in year 1 or 2 or 3. It is a year after year after year of practice practice practice. Everything is reps reps reps. In most fields, the appearance of eats this is exactly what I was saying here. In most fields, the appearance of ease seems to come with practice. Perhaps what I love that word. Perhaps what practice does is train your unconscious mind to handle tasks that used to require conscious thought. This 1 was a very interesting good design resembles nature. This is going to be This is something at the founder of D, of, Visa D hawk. I covered him back on Episode 02:60. Talked about over and over again. He's spent a lot time in. He had a lot of ideas on how to build his business by observing how things work in nature, Paul graham writes. Good design resembles nature. Nature, and this is why nature has had a long time to work on the problem. So it's a good sign when your answer resembles natures. Next 1, good design is redesign. It's rare to get things right the first time. Experts expect to throw away some early work. They plan for plans to change. It takes confidence to throw work away. You have to be able to think there's more where this came from. Mistakes are natural, instead of treating them as disasters make them easy to acknowledge and easy to fix. Leonardo Da vinci, more or less invented the sketch as a way to make drawing bear a greater weight of exploration, and then good design can copy Attitudes to copying often make a round trip. A novice imitate without knowing it. Next he tries consciously to be original. Finally, this is this is excellent. Finally, he decides it's more important to be right than original. The ambitious are not content to imitate. The second phase in the growth of taste is a conscious attempt at originality. I think the greatest masters go on to achieve a kind of selfless. They just want to get the right answer and if part of the right answer has already been discovered by someone else, that's no reason not to use it. They're confident enough to take from anyone without feeling that their own vision will be lost in the process. And then good design happens in chunks. So he's gonna talk about actual physical places. I'm gonna read from this book go like, hell. I think I covered it back on Founders number 97. Enzo Ferrari came to the exact same conclusion that program is it's a section in the essay. And Enzo said, is my opinion that there are innate gifts that are a peculiar of certain regions and that transferred into industry, these prop propensity may at times acquire an exceptional importance in Mode where I was born and set up my own works, meaning was own company. There is a species of psychosis for racing cars. Back to Paul Graham. Good design happens in chunks. Something was happening in Florence in the fifteenth century. And it can't have been genetic because it isn't happening now. Nothing is more powerful. This is again. I feel the main... Another another main theme about the importance of having ambitious people, like, know each other to be around each other. I think I talked about this in both the the the last 2 episodes program. He's saying it again here. Nothing is more powerful than a community of talented people working on related problems. Great work still comes disproportionately from a few hot. And then I actually love how he ends this. He talks about that a great work. Good design Usually comes starts with somebody saying, hey, I could do better than that. In practice, it is easier to see ugliness than to imagine beauty. Most of the people who've made beautiful things seem to have done it by fixing something that they thought ugly. Remember, that's not just an appearance. What did Steve Jobs say design is how it works. People think it's how it's how it looks. It's like, no. How it works. So you could play to product you're building, an industry. You just see something like, this isn't quite right. In practice, I think it's easier to see ugliness and to imagine beauty. Most of the people who've made beautiful things seem to have done it by fixing something they thought ugly. Great work usually... Seems to happen because someone sees something and thinks. I could do better than that. Intolerance for ugliness is not in and in in of itself enough. You have to understand a field well before you develop a good nose for what needs fixing another important point. You have to do your homework. And this is the absolute perfect sentence to end on. I love this. The recipe for great work is very exacting taste plus the ability to g it. And that is where I'll leave it for the full story. Highly recommend buying the book. You can read the essays for free online, but it's so nice having some of them in book form. And I hope some some publishing helps 1 day. Prints all of his all of Paul's essays, you know, probably have to be a multi, you know, multi book series. But I would love to own them in, you know, physical book form. So if you are gonna pick up the book, it'd be helpful if you use a link that's in the show notes available in on your podcast player and also all available at found dot com. You'll be supporting the podcast at the same time. I have already been inputting a bunch of the highlights not only from Paul's essays, but also from this book into my read wise. The past few weeks, Read wise has already started re reminding me a lot of the highlights that that a previously read. Think it's a super valuable tool to my favorite app that I pay for and I could not make the podcast without it. If you read a lot, and you want to remember what you read and you wanna use the same app that I do... You go to read wise dot io o slash founders, and you can try it for 60 days for free and see if you like it as much as I do. That is 277 books down 1000 ago, and I'll talk to you again soon."
}